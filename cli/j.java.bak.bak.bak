import java.io.*;
import java.net.*;
import java.util.*;
import java.util.concurrent.atomic.AtomicBoolean;

public class j{
public static void main(String[] args){
	ArrayList<Server> serverList = new ArrayList<>();
	while (true){
		try (ServerSocket serverSocket = new ServerSocket(6969)){
			Socket socket = serverSocket.accept();
			Server srv = new Server(serverSocket,socket,serverList);
			// serverList.add(srv); // Moved inside constructor. 
			System.out.println("Spawned a new server.");
		}
		catch (Exception e){
			System.out.println("Error in server spawning function.");
			System.out.println(e.getStackTrace()); // `e.getStackTrace` or just `e`? 
		}
	}
}}

class Server extends Thread{
	AtomicBoolean RUNNING = new AtomicBoolean(true);
	ServerSocket serverSocket;
	Socket socket;
	BufferedReader bufferedReader;
	BufferedWriter bufferedWriter;
	ArrayList<Server> lst; // The list of all servers. 
	Server(ServerSocket serverSocket,Socket socket,ArrayList<Server> lst){
		this.serverSocket = serverSocket;
		this.socket = socket;
		this.lst = lst; // Important line! 
		System.out.println("Connection established.");
		try{
			this.bufferedReader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
			this.bufferedWriter = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
		}
		catch (IOException e){
			System.out.println("Error spawning reader and writer.");
			return; // WATCH OUT.  // Maybe it would be better to throw an error? 
		}
		lst.add(this);
		this.start(); // Should this be _here_?! 
	}
	@Override
	public void run(){
		while (RUNNING.get()){
			try{
				String in = bufferedReader.readLine();
				//this.sendToAll(in); // Unfolded. 
				for (var srv : lst)
					srv.send(in);
			}
			catch (/*IO*/Exception e){
				System.out.println("Error in server.run sending message.");
				this.close();
				return;
			}
			//System.out.println("SCREAMING.");
			System.out.println("A message was sent.");
		}
	}
	/*
	void sendToAll(String in){ // Call send on all servers in the list of servers. 
		for (var srv : lst)
			srv.send(in);
	}
	*/
	void send(String in){
		try{
			bufferedWriter.write(in);
			bufferedWriter.newLine(); // Why do we need this? 
			bufferedWriter.flush(); // Think I know why this. 
		}
		catch (Exception e){
			System.out.println("Error in server.send sending message.");
			this.close();
			return;
		}
	}
	void close(){
		System.out.println("Server.close() run.");
		System.out.println("Client probably closed- deleting this particular _Server_.");
		RUNNING.set(false);
	}
}
